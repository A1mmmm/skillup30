import React, { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import api from '../../../shared/api/api';
import { useAuth } from '../../auth/AuthProvider';

const ChallengePage = () => {
    const { id } = useParams();
    const [challenge, setChallenge] = useState(null);
    const [userChallenge, setUserChallenge] = useState(null);
    const [challengeDays, setChallengeDays] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const { user } = useAuth();

    useEffect(() => {
        const fetchChallenge = async () => {
            try {
                setError(null);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–ª–µ–Ω–¥–∂–µ –∏ –ø–ª–∞–Ω
                const [challengeRes, challengeDaysRes] = await Promise.all([
                    api.get(`/challenges/${id}`),
                    api.get(`/challenges/${id}/plan`)
                ]);

                setChallenge(challengeRes.data);
                setChallengeDays(challengeDaysRes.data);

                // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å
                if (user) {
                    try {
                        const userChallengeRes = await api.get(`/challenges/${id}/user-progress`);
                        setUserChallenge(userChallengeRes.data);
                        console.log('‚úÖ User progress loaded successfully');
                    } catch (userProgressError) {
                        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
                        if (userProgressError.response && userProgressError.response.status === 400) {
                            console.log('‚ÑπÔ∏è User not participating in this challenge - this is normal');
                            setUserChallenge(null);
                        } else if (userProgressError.response && userProgressError.response.status === 401) {
                            console.log('‚ÑπÔ∏è User not authenticated for progress request');
                            setUserChallenge(null);
                        } else {
                            console.error('‚ùå Error fetching user progress:', userProgressError);
                            // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                            setUserChallenge(null);
                        }
                    }
                } else {
                    setUserChallenge(null);
                }

            } catch (error) {
                console.error('Error fetching challenge:', error);
                let errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞. ';

                if (error.response) {
                    // –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É
                    if (error.response.status === 404) {
                        errorMessage += '–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.';
                    } else if (error.response.status === 500) {
                        errorMessage += '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                    } else {
                        errorMessage += `–û—à–∏–±–∫–∞ ${error.response.status}: ${error.response.data?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
                    }
                } else if (error.request) {
                    // –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
                    errorMessage += '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.';
                } else {
                    // –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
                    errorMessage += '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.';
                }

                setError(errorMessage);
            } finally {
                setLoading(false);
            }
        };
        fetchChallenge();
    }, [id, user]);

    const joinChallenge = async () => {
        try {
            setError(null);
            console.log('üîç –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è—é—Å—å –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É ID:', id);
            await api.post(`/challenges/${id}/join`);
            console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É');
            window.location.reload();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É:', error);
            let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É. ';

            if (error.response) {
                if (error.response.status === 409) {
                    errorMessage += '–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —á–µ–ª–ª–µ–Ω–¥–∂–µ.';
                } else if (error.response.status === 401) {
                    errorMessage += '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.';
                } else if (error.response.status === 404) {
                    errorMessage += '–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.';
                } else {
                    errorMessage += `–û—à–∏–±–∫–∞ ${error.response.status}: ${error.response.data?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
                }
            } else if (error.request) {
                errorMessage += '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.';
            } else {
                errorMessage += '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.';
            }

            setError(errorMessage);
        }
    };

    const checkIn = async () => {
        try {
            setError(null);
            console.log('üîç –û—Ç–º–µ—á–∞—é –¥–µ–Ω—å –¥–ª—è —á–µ–ª–ª–µ–Ω–¥–∂–∞ ID:', id);
            await api.post(`/challenges/${id}/checkin`);
            console.log('‚úÖ –î–µ–Ω—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—á–µ–Ω');
            window.location.reload();
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–Ω—è:', error);
            let errorMessage = '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –¥–Ω—è. ';

            if (error.response) {
                if (error.response.status === 409) {
                    errorMessage += '–°–µ–≥–æ–¥–Ω—è –≤—ã —É–∂–µ –æ—Ç–º–µ—Ç–∏–ª–∏ –¥–µ–Ω—å.';
                } else if (error.response.status === 401) {
                    errorMessage += '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.';
                } else if (error.response.status === 404) {
                    errorMessage += '–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω.';
                } else {
                    errorMessage += `–û—à–∏–±–∫–∞ ${error.response.status}: ${error.response.data?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
                }
            } else if (error.request) {
                errorMessage += '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.';
            } else {
                errorMessage += '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.';
            }

            setError(errorMessage);
        }
    };

    if (loading) return <div style={{ textAlign: 'center', padding: '2em' }}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
    if (error) return (
        <div className="container">
            <div className="error-message" style={{ margin: '2em auto', maxWidth: '600px' }}>
                <h3 style={{ margin: '0 0 1em 0', color: 'inherit' }}>‚ö†Ô∏è –û—à–∏–±–∫–∞</h3>
                {error}
                <button
                    onClick={() => window.location.reload()}
                    style={{
                        marginTop: '1em',
                        padding: '0.5em 1em',
                        backgroundColor: 'var(--color-accent)',
                        color: 'white',
                        border: 'none',
                        borderRadius: '0.5em',
                        cursor: 'pointer'
                    }}
                >
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        </div>
    );
    if (!challenge) return <div style={{ textAlign: 'center', padding: '2em' }}>–ß–µ–ª–ª–µ–Ω–¥–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;

    return (
        <div className="container">
            <div className="card">
                <h1 style={{
                    color: 'var(--color-accent)',
                    marginBottom: '0.5em',
                    fontSize: '2.2em'
                }}>{challenge.title}</h1>
                <p style={{
                    fontSize: '1.1em',
                    lineHeight: 1.6,
                    marginBottom: '1.5em'
                }}>{challenge.description}</p>
                <div style={{
                    display: 'flex',
                    gap: 16,
                    marginBottom: '2em',
                    flexWrap: 'wrap'
                }}>
                    <span style={{
                        padding: '0.5em 1em',
                        backgroundColor: 'var(--color-accent)',
                        color: 'white',
                        borderRadius: '0.5em',
                        fontSize: '0.9em'
                    }}>
                        üéØ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {challenge.difficultyLevel}
                    </span>
                    <span style={{
                        padding: '0.5em 1em',
                        backgroundColor: '#10b981',
                        color: 'white',
                        borderRadius: '0.5em',
                        fontSize: '0.9em'
                    }}>
                        üèÜ –ù–∞–≥—Ä–∞–¥–∞: {challenge.rewardPoints} XP
                    </span>
                </div>

                {/* –î–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —á–µ–ª–ª–µ–Ω–¥–∂–∞ */}
                <div style={{ marginTop: 32 }}>
                    <h3 style={{
                        color: 'var(--color-accent)',
                        marginBottom: '1em',
                        fontSize: '1.5em',
                        textAlign: 'center'
                    }}>üìÖ 30-–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω</h3>
                    <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(200px, 1fr))', gap: 16, marginTop: 16 }}>
                        {challengeDays.map((day) => (
                            <div key={day.dayNumber} style={{
                                border: '1px solid var(--color-border)',
                                borderRadius: 8,
                                padding: 16,
                                backgroundColor: 'var(--color-card-bg)',
                                backdropFilter: 'var(--color-card-blur)',
                                transition: 'transform 0.2s, box-shadow 0.2s'
                            }}>
                                <h4 style={{ margin: '0 0 8px 0', color: 'var(--color-accent)' }}>–î–µ–Ω—å {day.dayNumber}</h4>
                                <p style={{ margin: 0, fontSize: '14px', color: 'var(--color-text)' }}>{day.task}</p>
                            </div>
                        ))}
                    </div>
                </div>

                {userChallenge ? (
                    <div style={{ marginTop: 32, textAlign: 'center' }}>
                        <h3 style={{
                            color: 'var(--color-accent)',
                            marginBottom: '1em',
                            fontSize: '1.5em'
                        }}>üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</h3>
                        <div style={{
                            display: 'flex',
                            justifyContent: 'center',
                            gap: '2em',
                            marginBottom: '1.5em',
                            flexWrap: 'wrap'
                        }}>
                            <div style={{
                                padding: '1em',
                                backgroundColor: 'var(--color-accent)',
                                color: 'white',
                                borderRadius: '0.5em',
                                minWidth: '120px'
                            }}>
                                <div style={{ fontSize: '1.5em', fontWeight: 'bold' }}>{userChallenge.completedDays}/30</div>
                                <div style={{ fontSize: '0.9em' }}>–¥–Ω–µ–π</div>
                            </div>
                            <div style={{
                                padding: '1em',
                                backgroundColor: userChallenge.isCompleted ? '#10b981' : '#f59e0b',
                                color: 'white',
                                borderRadius: '0.5em',
                                minWidth: '120px'
                            }}>
                                <div style={{ fontSize: '1.5em', fontWeight: 'bold' }}>
                                    {userChallenge.isCompleted ? 'üèÜ' : 'üöÄ'}
                                </div>
                                <div style={{ fontSize: '0.9em' }}>
                                    {userChallenge.isCompleted ? '–ó–∞–≤–µ—Ä—à–µ–Ω' : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                                </div>
                            </div>
                        </div>
                        {!userChallenge.isCompleted && (
                            <button
                                onClick={checkIn}
                                className="btn"
                                style={{
                                    fontSize: '1.1em',
                                    padding: '0.8em 2em',
                                    backgroundColor: '#10b981',
                                    color: 'white',
                                    border: 'none',
                                    borderRadius: '0.5em',
                                    cursor: 'pointer'
                                }}
                            >
                                ‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å —Å–µ–≥–æ–¥–Ω—è
                            </button>
                        )}
                    </div>
                ) : user ? (
                    <div style={{ marginTop: 24, textAlign: 'center' }}>
                        <button
                            onClick={joinChallenge}
                            className="btn"
                            style={{
                                fontSize: '1.1em',
                                padding: '0.8em 2em',
                                backgroundColor: 'var(--color-accent)',
                                color: 'white',
                                border: 'none',
                                borderRadius: '0.5em',
                                cursor: 'pointer',
                                transition: 'background-color 0.2s'
                            }}
                        >
                            üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É
                        </button>
                        <p style={{ marginTop: '0.5em', fontSize: '0.9em', color: 'var(--color-text)' }}>
                            –ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π 30-–¥–Ω–µ–≤–Ω—ã–π –ø—É—Ç—å –∫ —É—Å–ø–µ—Ö—É!
                        </p>
                    </div>
                ) : (
                    <div style={{ marginTop: 24, textAlign: 'center' }}>
                        <p style={{ marginBottom: '1em', fontSize: '1.1em' }}>–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É</p>
                        <Link to="/login" className="btn" style={{
                            textDecoration: 'none',
                            display: 'inline-block',
                            padding: '0.8em 2em',
                            backgroundColor: 'var(--color-accent)',
                            color: 'white',
                            borderRadius: '0.5em',
                            transition: 'background-color 0.2s'
                        }}>
                            –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
                        </Link>
                    </div>
                )}
            </div>
        </div>
    );
};

export default ChallengePage; 