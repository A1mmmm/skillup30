import React, { useEffect, useState } from 'react';
import api from '../../../shared/api/api';
import { useAuth } from '../../auth/AuthProvider';
import './AchievementsPage.css';

const AchievementsPage = () => {
    const { user } = useAuth();
    const [userAchievements, setUserAchievements] = useState([]);
    const [allAchievements, setAllAchievements] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [activeTab, setActiveTab] = useState('my'); // 'my' –∏–ª–∏ 'all'

    useEffect(() => {
        fetchAchievements();
    }, [user]);

    const fetchAchievements = async () => {
        try {
            setError(null);
            setLoading(true);

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–¥–æ—Å—Ç—É–ø–Ω–æ –±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
            const allRes = await api.get('/achievements/all');
            setAllAchievements(allRes.data);

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
            if (user) {
                try {
                    const userRes = await api.get('/achievements');
                    setUserAchievements(userRes.data);
                } catch (error) {
                    console.error('Error fetching user achievements:', error);
                    setUserAchievements([]);
                }
            }
        } catch (error) {
            console.error('Error fetching achievements:', error);
            let errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π. ';

            if (error.response) {
                if (error.response.status === 500) {
                    errorMessage += '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
                } else {
                    errorMessage += `–û—à–∏–±–∫–∞ ${error.response.status}: ${error.response.data || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`;
                }
            } else if (error.request) {
                errorMessage += '–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.';
            } else {
                errorMessage += '–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.';
            }

            setError(errorMessage);
        } finally {
            setLoading(false);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error) {
        return (
            <div className="container">
                <div className="error-message" style={{ margin: '2em auto', maxWidth: '600px' }}>
                    <h3 style={{ margin: '0 0 1em 0', color: 'inherit' }}>‚ö†Ô∏è –û—à–∏–±–∫–∞</h3>
                    {error}
                    <button
                        onClick={() => window.location.reload()}
                        style={{
                            marginTop: '1em',
                            padding: '0.5em 1em',
                            backgroundColor: 'var(--color-accent)',
                            color: 'white',
                            border: 'none',
                            borderRadius: '0.5em',
                            cursor: 'pointer'
                        }}
                    >
                        –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                    </button>
                </div>
            </div>
        );
    }

    const renderAchievementCard = (achievement, isUserAchievement = false) => (
        <div key={achievement.id} className={`card achievement-card ${isUserAchievement ? 'earned' : 'not-earned'}`}>
            {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
            {isUserAchievement && (
                <div className="badge-indicator">
                    ‚úì
                </div>
            )}

            <div className="icon">
                {achievement.badgeImage ? (
                    <img src={achievement.badgeImage} alt={achievement.name} style={{ width: 64, height: 64 }} />
                ) : (
                    isUserAchievement ? 'üèÜ' : 'üîí'
                )}
            </div>

            <h3 className="title">
                {achievement.name}
            </h3>

            <p className="description">
                {achievement.description}
            </p>

            {isUserAchievement && achievement.awardedAt && (
                <div className="status earned">
                    –ü–æ–ª—É—á–µ–Ω–æ {new Date(achievement.awardedAt).toLocaleDateString()}
                </div>
            )}

            {!isUserAchievement && (
                <div className="status not-earned">
                    –ù–µ –ø–æ–ª—É—á–µ–Ω–æ
                </div>
            )}
        </div>
    );

    const getCurrentAchievements = () => {
        if (activeTab === 'my') {
            return userAchievements;
        } else {
            return allAchievements;
        }
    };

    const getCurrentLoading = () => {
        if (activeTab === 'my' && !user) {
            return false; // –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        }
        return loading;
    };

    return (
        <div className="container achievements-container">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="card achievements-header">
                <h1 style={{
                    color: 'var(--color-accent)',
                    marginBottom: '0.5em',
                    fontSize: '2.5em'
                }}>
                    üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                </h1>
                <p style={{ fontSize: '1.1em', color: 'var(--color-text)' }}>
                    –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                </p>
            </div>

            {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∫–ª–∞–¥–æ–∫ */}
            <div className="card" style={{ marginBottom: 24 }}>
                <div className="achievements-tabs">
                    <button
                        onClick={() => setActiveTab('my')}
                        className={`achievements-tab ${activeTab === 'my' ? 'active' : ''}`}
                    >
                        üéØ –ú–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                        {userAchievements.length > 0 && (
                            <span className="badge">
                                {userAchievements.length}
                            </span>
                        )}
                    </button>

                    <button
                        onClick={() => setActiveTab('all')}
                        className={`achievements-tab ${activeTab === 'all' ? 'active' : ''}`}
                    >
                        üåü –í—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                        <span className="badge">
                            {allAchievements.length}
                        </span>
                    </button>
                </div>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ */}
            {user && (
                <div className="card achievements-progress">
                    <h3 style={{ marginBottom: '0.5em' }}>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å</h3>
                    <div className="achievements-progress-stats">
                        <div className="achievements-progress-stat">
                            <div className="number">{userAchievements.length}</div>
                            <div className="label">–ø–æ–ª—É—á–µ–Ω–æ</div>
                        </div>
                        <div className="achievements-progress-stat">
                            <div className="number">{allAchievements.length}</div>
                            <div className="label">–≤—Å–µ–≥–æ</div>
                        </div>
                        <div className="achievements-progress-stat">
                            <div className="number">
                                {allAchievements.length > 0 ? Math.round((userAchievements.length / allAchievements.length) * 100) : 0}%
                            </div>
                            <div className="label">–∑–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                        </div>
                    </div>
                </div>
            )}

            {/* –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */}
            <div style={{
                opacity: loading ? 0.5 : 1,
                transition: 'opacity 0.3s ease',
                minHeight: '400px'
            }}>
                {getCurrentLoading() ? (
                    <div className="card achievements-loading">
                        <div className="icon">‚è≥</div>
                        <div>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...</div>
                    </div>
                ) : activeTab === 'my' && !user ? (
                    <div className="card achievements-auth-required">
                        <div className="icon">üîê</div>
                        <h3 className="title">–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É</h3>
                        <p className="description">
                            –ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
                        </p>
                        <button
                            onClick={() => window.location.href = '/login'}
                            className="login-button"
                        >
                            –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
                        </button>
                    </div>
                ) : (
                    <div className="achievements-grid">
                        {getCurrentAchievements().map(achievement =>
                            renderAchievementCard(
                                achievement,
                                activeTab === 'my' || userAchievements.some(ua => ua.id === achievement.id)
                            )
                        )}
                    </div>
                )}

                {/* –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ */}
                {!getCurrentLoading() && getCurrentAchievements().length === 0 && (
                    <div className="card achievements-empty">
                        <div className="icon">
                            {activeTab === 'my' ? 'üòî' : 'üìù'}
                        </div>
                        <h3 className="title">
                            {activeTab === 'my' ? '–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π' : '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'}
                        </h3>
                        <p className="description">
                            {activeTab === 'my'
                                ? '–ù–∞—á–Ω–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!'
                                : '–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ.'
                            }
                        </p>
                    </div>
                )}
            </div>
        </div>
    );
};

export default AchievementsPage; 